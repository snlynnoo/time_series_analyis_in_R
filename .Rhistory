lines(fitted(ses_model),col="red",lwd=2)
# plotting train and test
plot(ses_forecast, main = "Simple Exponential Smoothing", xlab = "Date", ylab = "Humidity",lwd=2, ylim = c(0,80) )
lines(fitted(ses_model),col="red",lwd=2)
# to add fitted model into the existing plot
lines(fitted(ts_humidity_arima112), col="red", lwd=2)
# to plot the TS with forecasts
plot(forecast(ts_humidity_arima112, h= 5))
# to add fitted model into the existing plot
lines(fitted(ts_humidity_arima112), col="red", lwd=2)
coeftest(ts_humidity_arima112) # Sig
ts_humidity_arima112 <- arima(ts_humidity, order = c(1,1,2)) # auto.arima
# to plot the TS with forecasts
plot(forecast(ts_humidity_arima112, h= 5))
# to add fitted model into the existing plot
lines(fitted(ts_humidity_arima112), col="red", lwd=2)
View(data)
plot(data$temp)
# Explore variables
# plot(data$temp)
# plot(data$dew)
plot(data$humidity)
library('readxl')
library('forecast')
library('tseries')
library('TTR')
library('uroot')
library('trend')
library('lmtest')
# Import data
data <- read_excel('datasets/Dubai_TSF.xlsx')
# Explore variables
# plot(data$temp)
# plot(data$dew)
plot(data$humidity)
# convert to TS
ts_humidity <- ts(data$humidity, start = c(2,1), frequency = 7)
# convert to TS
ts_humidity <- ts(data$humidity, start = c(2,1), frequency = 7)
length(ts_humidity)
View(ts_humidity)
# TS plot
plot(ts_humidity)
# ACF plot for stationary
Acf(ts_humidity, ylim=c(-1,1))
# ACF plot for stationary
Acf(ts_humidity)
# ACF plot for stationary
Acf(ts_humidity)
# ACF plot for stationary
Acf(ts_humidity)
# ADF test for stationary
adf.test(ts_humidity)
# Number of differencing
ndiffs(ts_humidity)
tsdisplay(ts_humidity)
tsdisplay(ts_humidity)
dev.off()
tsdisplay(ts_humidity)
# MK Test for trend
mk.test(ts_humidity)
isSeasonal(ts_humidity)
# any seasonal ?
# install.packages('seastests')
library('seastests')
# check the length of train and test sets
length(ts_humidity)
length(training_ts)
length(testing_ts)
library('readxl')
library('forecast')
library('tseries')
library('TTR')
library('uroot')
library('trend') # mk.test
library('seastests') # is.seasonal
library('lmtest')
# Import data
data <- read_excel('datasets/Dubai_TSF.xlsx')
# Explore variables
plot(data$humidity)
# convert to TS
ts_humidity <- ts(data$humidity, start = c(2,1), frequency = 7)
# TS plot
plot(ts_humidity)
# ACF plot for stationary
Acf(ts_humidity)
# ADF test for stationary
adf.test(ts_humidity)
# Number of differencing
ndiffs(ts_humidity)
# MK Test for trend
mk.test(ts_humidity)
# KPSS Test for level stationary
kpss.test(ts_humidity)
# Data partitioning using 80-20% ratio
training_ts <- ts(ts_humidity[1:(length(ts_humidity)*split)], frequency = 7)
gc()
library('readxl')
library('forecast')
library('tseries')
library('TTR')
library('uroot')
library('trend') # mk.test
library('seastests') # is.seasonal
library('lmtest')
# Import data
data <- read_excel('datasets/Dubai_TSF.xlsx')
# Explore variables
plot(data$humidity)
# convert to TS
ts_humidity <- ts(data$humidity, start = c(2,1), frequency = 7)
# TS plot
plot(ts_humidity)
# ACF plot for stationary
Acf(ts_humidity)
# ADF test for unit root (irregular) stationary
adf.test(ts_humidity)
# MK Test for trend
mk.test(ts_humidity)
# KPSS Test for level (deterministic) stationary
kpss.test(ts_humidity)
# Number of differencing
ndiffs(ts_humidity)
# Data partitioning using 80-20% ratio
training_ts <- ts(ts_humidity[1:(length(ts_humidity)*split)], frequency = 7)
# Data partitioning using 80-20% ratio
training_ts <- ts(ts_humidity[1:(length(ts_humidity)*0.8)], frequency = 7)
testing_ts <- ts(ts_humidity[-c(1:(length(ts_humidity)*0.8))], frequency = 7)
# check the length of train and test sets
length(ts_humidity)
length(training_ts)
length(testing_ts)
# ======= (i) Simple exponential Smoothing =======
ses_model <- ses(training_ts, h=length(training_ts))
ses_forecast <- forecast(ses_model, h=length(testing_ts))
# ======= (i) Simple exponential Smoothing =======
ses_model <- ses(training_ts, h=length(training_ts))
ses_forecast <- forecast(ses_model, h=length(testing_ts))
# plotting train and test
plot(ses_forecast, main = "Simple Exponential Smoothing - Humidity of Dubai", xlab = "Date", ylab = "Humidity",lwd=2, ylim = c(0,80) )
# plotting train and test
plot(ses_forecast, main = "Simple Exponential Smoothing - Humidity of Dubai", xlab = "Date", ylab = "Humidity",lwd=2 )
# ======= (i) Simple exponential Smoothing =======
ses_model <- ses(training_ts, h=length(testing_ts))
ses_forecast <- forecast(ses_model, h=length(testing_ts))
# plotting train and test
plot(ses_forecast, main = "Simple Exponential Smoothing - Humidity of Dubai", xlab = "Date", ylab = "Humidity",lwd=2 )
lines(fitted(ses_model),col="red",lwd=2)
legend("topleft", legend = c("Original","Train", "Test"), col=c("black","red","blue"), lty=1, cex = 0.5)
legend("topleft", legend = c("Original","Train", "Test"), col=c("black","red","blue"), lty=1, cex = 0.7)
# plotting train and test
plot(ses_forecast, main = "Simple Exponential Smoothing - Humidity of Dubai", xlab = "Date", ylab = "Humidity",lwd=2 )
lines(fitted(ses_model),col="red",lwd=2)
legend("topleft", legend = c("Original","Train", "Test"), col=c("black","red","blue"), lty=1, cex = 0.6)
# performance matrices
ses_mean_f = ts(ses_forecast$mean, frequency = 7)
rbind(accuracy(ses_model) , accuracy(ses_mean_f, testing_ts))
# ======= (ii) Holts Method =======
holts_model <- holt(training_ts, h=length(testing_ts))
holts_forecast <- forecast(holts_model, h=length(testing_ts))
# Plot forecast and actual test data
plot(holts_forecast , main = "Holts Method", xlab = "Date", ylab = "Humidity",lwd=2)
lines(fitted(holts_model),col="red",lwd=2)
legend("topleft", legend = c("Original","Train", "Test"), col=c("black","red","blue"), lty=1, cex = 0.6)
# performance matrices
holts_mean_f <- ts(holts_forecast$mean, frequency = 7)
rbind(accuracy(holts_model) , accuracy(holts_mean_f, testing_ts))
trend_data <- 1:length(training_ts)
lr_model <- tslm(training_ts ~ trend_data)
new_data <- (length(training_ts) + 1):(length(training_ts) + length(testing_ts))
lr_forecast <- forecast::forecast(lr_model, newdata = data.frame(trend_data = new_data))
# Plot forecast and actual test data
plot(lr_forecast, main = "Forecasting using linear trend ", xlab = "Date", ylab = "Humidity",lwd=2)
lines(lr_forecast$fitted,col="red",lwd=2)
legend("topleft", legend = c("Original","Train", "Test"), col=c("black","red","blue"), lty=2, cex = 0.5)
# Plot forecast and actual test data
plot(lr_forecast, main = "Forecasting using linear trend ", xlab = "Date", ylab = "Humidity",lwd=2)
lines(lr_forecast$fitted,col="red",lwd=2)
legend("bottomleft", legend = c("Original","Train", "Test"), col=c("black","red","blue"), lty=2, cex = 0.5)
# Plot forecast and actual test data
plot(lr_forecast, main = "Forecasting using linear trend ", xlab = "Date", ylab = "Humidity",lwd=2)
lines(lr_forecast$fitted,col="red",lwd=2)
legend("bottomleft", legend = c("Original","Train", "Test"), col=c("black","red","blue"), lty=2, cex = 0.4)
# Plot forecast and actual test data
plot(lr_forecast, main = "Forecasting using linear trend ", xlab = "Date", ylab = "Humidity",lwd=2)
lines(lr_forecast$fitted,col="red",lwd=2)
legend("bottomleft", legend = c("Original","Train", "Test"), col=c("black","red","blue"), lty=2, cex = 0.45)
# Plot forecast and actual test data
plot(lr_forecast, main = "Forecasting using linear trend ", xlab = "Date", ylab = "Humidity",lwd=2)
lines(lr_forecast$fitted,col="red",lwd=2)
legend("bottomleft", legend = c("Original","Train", "Test"), col=c("black","red","blue"), lty=2, cex = 0.43)
# plotting ACF and PACF
tsdisplay(ts_humidity)
# plotting ACF and PACF
tsdisplay(ts_humidity)
# testing stationary
adf.test(ts_humidity) # => Not stationary
# getting recommended number of diff.
ndiffs(ts_humidity)
# plotting ACF and PACF for transformed data directly
tsdisplay(diff(ts_humidity, 2))
# plotting ACF and PACF for transformed data directly
tsdisplay(diff(ts_humidity, 2))
tsdisplay(ts_humidity)
# plotting ACF and PACF for transformed data directly
tsdisplay(diff(ts_humidity, 1))
# Building ARIMA (0, 1, 1)
ts_humidity_arima210 <- arima(ts_humidity, order = c(2,1,0)) # own
# Building ARIMA (0, 1, 1)
ts_humidity_arima210 <- arima(ts_humidity, order = c(2,0,0))
ts_humidity_arima210 <- arima(ts_humidity, order = c(2,1,0)) # own
# Building ARIMA (0, 1, 1)
ts_humidity_arima200 <- arima(ts_humidity, order = c(2,0,0))
ts_humidity_arima210 <- arima(ts_humidity, order = c(2,1,0)) # own
ts_humidity_arima112 <- arima(ts_humidity, order = c(1,1,2)) # auto.arima
# to generate the unknown parameters/coefficient(s)
summary(ts_humidity_arima011)
# Building ARIMA (0, 1, 1)
ts_humidity_arima200 <- arima(ts_humidity, order = c(2,0,0))
ts_humidity_arima210 <- arima(ts_humidity, order = c(2,1,0)) # own
ts_humidity_arima112 <- arima(ts_humidity, order = c(1,1,2)) # auto.arima
# to generate the unknown parameters/coefficient(s)
summary(ts_humidity_arima112)
# to test the significant of the coefficients
library('lmtest')
coeftest(ts_humidity_arima200)
coeftest(ts_humidity_arima210)
coeftest(ts_humidity_arima112) # Sig
# to conduct Ljung Box test and Residual Analysis
checkresiduals(ts_humidity_arima200)
checkresiduals(ts_humidity_arima210)
checkresiduals(ts_humidity_arima112)
# to plot the TS with forecasts
plot(forecast(ts_humidity_arima200, h= 5))
# to plot the TS with forecasts
plot(forecast(ts_humidity_arima200, h= 5))
# to plot the TS with forecasts
plot(forecast(ts_humidity_arima200, h= 5))
# to add fitted model into the existing plot
lines(fitted(ts_humidity_arima200), col="red", lwd=2)
plot(forecast(ts_humidity_arima112, h= 5))
lines(fitted(ts_humidity_arima112), col="red", lwd=2)
# performance matrices for ARIMA(2,0,0)
accuracy(ts_humidity_arima200)
accuracy(ts_humidity_arima112)
# Import library
library('readxl')
library('forecast')
library('tseries')
citation()
clear
# Import library
library('readxl')
library('forecast')
library('tseries')
library('TTR')
library('uroot')
library('trend') # mk.test
library('seastests') # is.seasonal
library('lmtest') # coeftest
# Import data
data <- read_excel('datasets/Dubai_TSF.xlsx')
# TS plot
plot(ts_humidity, main = "Daily Average Humdity in Dubai from 2022-01-01 to 2023-02-24", xlab = "Day", ylab = "Humidity (%)")
# ACF plot for stationary
Acf(ts_humidity)
# ADF test for unit root (irregular/level) stationary
adf.test(ts_humidity)
# MK Test for trend
mk.test(ts_humidity)
# KPSS Test for trend (deterministic) stationary
kpss.test(ts_humidity)
isSeasonal?
# False -> No seasonality exists.
# CH Test for seasonal stationality
ch.test(ts_humidity)
?isSeasonal()
# any seasonal ?
isSeasonal(ts_humidity)
cs.test(ts_humidity)
ts_humidity_arima112 <- arima(ts_humidity, order = c(1,1,2)) # auto.arima
accuracy(ts_humidity_arima112)
trend_data <- 1:length(training_ts)
lr_model <- tslm(training_ts ~ trend_data)
new_data <- (length(training_ts) + 1):(length(training_ts) + length(testing_ts))
lr_forecast <- forecast::forecast(lr_model, newdata = data.frame(trend_data = new_data))
# performance matrices
lr_mean_f <- ts(lr_forecast$mean, frequency = 7)
rbind(accuracy(lr_model) , accuracy(lr_mean_f, testing_ts))
# ======= (i) Simple exponential Smoothing =======
ses_model <- ses(training_ts, h=length(testing_ts))
ses_forecast <- forecast(ses_model, h=length(testing_ts))
# plotting train and test
plot(ses_forecast, main = "Simple Exponential Smoothing - Humidity of Dubai", xlab = "Day", ylab = "Humidity",lwd=2 )
lines(fitted(ses_model),col="red",lwd=2)
# plotting train and test
plot(ses_forecast, main = "Simple Exponential Smoothing - Humidity of Dubai", xlab = "Day", ylab = "Humidity",lwd=2 )
lines(fitted(ses_model),col="red",lwd=2)
legend("topleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 0.6)
# plotting train and test
plot(ses_forecast, main = "Simple Exponential Smoothing - Humidity of Dubai", xlab = "Day", ylab = "Humidity",lwd=2 )
lines(fitted(ses_model),col="red",lwd=2)
legend("topleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 0.9)
legend("topleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","lightblue"), lty=1, cex = 0.9)
legend("topleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","navyblue"), lty=1, cex = 0.9)
?legend
legend("topleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 0.9)
# ======= (ii) Holts Method =======
holts_model <- holt(training_ts, h=length(testing_ts))
# ======= (ii) Holts Method =======
holts_model <- holt(training_ts, h=length(testing_ts))
# plotting train and test
plot(ses_forecast, main = "Simple Exponential Smoothing - Humidity of Dubai", xlab = "Day", ylab = "Humidity",lwd=2 )
lines(fitted(ses_model),col="red",lwd=2)
legend("topleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 0.9)
# plotting train and test
plot(ses_forecast, main = "Simple Exponential Smoothing - Humidity of Dubai", xlab = "Day", ylab = "Humidity",lwd=2 )
lines(fitted(ses_model),col="red",lwd=2)
legend("topleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 2)
# plotting train and test
plot(ses_forecast, main = "Simple Exponential Smoothing - Humidity of Dubai", xlab = "Day", ylab = "Humidity",lwd=2 )
lines(fitted(ses_model),col="red",lwd=2)
legend("topleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex =1.5)
# plotting train and test
plot(ses_forecast, main = "Simple Exponential Smoothing - Humidity of Dubai", xlab = "Day", ylab = "Humidity",lwd=2 )
lines(fitted(ses_model),col="red",lwd=2)
legend("topleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex =1.2)
legend("topleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=2, cex =1.2)
legend("topleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=5, cex =1.2)
legend("topleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex =1.2)
legend("topleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex =1.3)
# ======= (ii) Holts Method =======
holts_model <- holt(training_ts, h=length(testing_ts))
holts_forecast <- forecast(holts_model, h=length(testing_ts))
# Plot forecast and actual test data
plot(holts_forecast , main = "Holts Method - Humidity of Dubai", xlab = "Day", ylab = "Humidity",lwd=2)
lines(fitted(holts_model),col="red",lwd=2)
legend("topleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 0.6)
legend("topleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 1.3)
# plotting train and test
plot(ses_forecast, main = "Forecasts using Simple Exponential Smoothing", xlab = "Day", ylab = "Humidity",lwd=2 )
lines(fitted(ses_model),col="red",lwd=2)
# plotting train and test
plot(ses_forecast, main = "Forecasts using Simple Exponential Smoothing", xlab = "Day", ylab = "Humidity (%)",lwd=2 )
lines(fitted(ses_model),col="red",lwd=2)
legend("topleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex =1.3)
# ======= (ii) Holts Method =======
holts_model <- holt(training_ts, h=length(testing_ts))
holts_forecast <- forecast(holts_model, h=length(testing_ts))
# Plot forecast and actual test data
plot(holts_forecast , main = "Forecasts using Holts Method", xlab = "Day", ylab = "Humidity (%)",lwd=2)
lines(fitted(holts_model),col="red",lwd=2)
legend("topleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 1.3)
trend_data <- 1:length(training_ts)
lr_model <- tslm(training_ts ~ trend_data)
new_data <- (length(training_ts) + 1):(length(training_ts) + length(testing_ts))
lr_forecast <- forecast::forecast(lr_model, newdata = data.frame(trend_data = new_data))
# Plot forecast and actual test data
plot(lr_forecast, main = "Forecasts using Linear Trend Model", xlab = "Day", ylab = "Humidity (%)",lwd=2)
lines(lr_forecast$fitted,col="red",lwd=2)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=2, cex = 0.43)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=2, cex = 1.3)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=, cex = 1.3)
# Plot forecast and actual test data
plot(lr_forecast, main = "Forecasts using Linear Trend Model", xlab = "Day", ylab = "Humidity (%)",lwd=2)
lines(lr_forecast$fitted,col="red",lwd=2)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=, cex = 1.3)
# Plot forecast and actual test data
plot(lr_forecast, main = "Forecasts using Linear Trend Model", xlab = "Day", ylab = "Humidity (%)",lwd=2)
lines(lr_forecast$fitted,col="red",lwd=2)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 1.3)
# ACF plot for stationary
Acf(ts_humidity)
?Acf
# ACF plot for stationary
Acf(ts_humidity, main="Autocorrelation of Humidity")
legend("topright", legend="95% Confidence Interval", lty=1, col="blue")
# ACF plot for stationary
Acf(ts_humidity, main="Autocorrelation Plot")
# ACF plot for stationary
Acf(ts_humidity, main="Autocorrelation Plot for Humidity")
# Number of differencing
ndiffs(ts_humidity)
# any seasonal ?
isSeasonal(ts_humidity)
# KPSS Test for trend (deterministic) stationary
kpss.test(ts_humidity)
kpss.test(diff(ts_humidity,1))
# Number of differencing
ndiffs(ts_humidity)
# performance matrices
holts_mean_f <- ts(holts_forecast$mean, frequency = 7)
rbind(accuracy(holts_model) , accuracy(holts_mean_f, testing_ts))
# performance matrices
lr_mean_f <- ts(lr_forecast$mean, frequency = 7)
rbind(accuracy(lr_model) , accuracy(lr_mean_f, testing_ts))
# performance matrices
ses_mean_f = ts(ses_forecast$mean, frequency = 7)
rbind(accuracy(ses_model) , accuracy(ses_mean_f, testing_ts))
# performance matrices
holts_mean_f <- ts(holts_forecast$mean, frequency = 7)
rbind(accuracy(holts_model) , accuracy(holts_mean_f, testing_ts))
# performance matrices
lr_mean_f <- ts(lr_forecast$mean, frequency = 7)
rbind(accuracy(lr_model) , accuracy(lr_mean_f, testing_ts))
# plotting ACF and PACF
tsdisplay(ts_humidity)
tsdisplay(diff(ts_humidity,1))
ts_humidity_arima200 <- arima(ts_humidity, order = c(0,1,2))
coeftest(ts_humidity_arima012)
# to test the significant of the coefficients
library('lmtest')
ts_humidity_arima200 <- arima(ts_humidity, order = c(0,1,2))
coeftest(ts_humidity_arima012)
ts_humidity_arima012 <- arima(ts_humidity, order = c(0,1,2))
coeftest(ts_humidity_arima012)
checkresiduals(ts_humidity_arima012)
ts_humidity_arima012 <- arima(ts_humidity, order = c(2,1,2))
ts_humidity_arima212 <- arima(ts_humidity, order = c(2,1,2))
coeftest(ts_humidity_arima212)
checkresiduals(ts_humidity_arima212)
ts_humidity_arima412 <- arima(ts_humidity, order = c(4,1,2))
checkresiduals(ts_humidity_arima412)
ts_humidity_arima112 <- arima(ts_humidity, order = c(1,1,2)) # auto.arima
checkresiduals(ts_humidity_arima112)
# performance matrices for ARIMA(2,0,0)
accuracy(ts_humidity_arima412)
accuracy(ts_humidity_arima212)
accuracy(ts_humidity_arima112)
coeftest(ts_humidity_arima412)
checkresiduals(ts_humidity_arima212)
coeftest(ts_humidity_arima212)
coeftest(ts_humidity_arima112) # Sig
# ACF plot for stationary
Acf(ts_humidity, main="Autocorrelation Plot for Humidity")
Acf(diff(ts_humidity,1), main="ACF Plot after first differencing")
# plotting ACF and PACF
tsdisplay(ts_humidity)
# plotting ACF and PACF
tsdisplay(ts_humidity, main = "ACF and PACF for original series")
# plotting ACF and PACF
tsdisplay(ts_humidity, main = "ACF and PACF Plot for original series")
# plotting ACF and PACF
tsdisplay(ts_humidity, main = "ACF and PACF Plots for original series")
tsdisplay(diff(ts_humidity,1), main = "ACF and PACF Plots after first differencing")
ts_humidity_arima012 <- arima(ts_humidity, order = c(0,1,2))
ts_humidity_arima212 <- arima(ts_humidity, order = c(2,1,2)) # sig
# Building ARIMA (0, 1, 1)
ts_humidity_arima200 <- arima(ts_humidity, order = c(2,0,0))
coeftest(ts_humidity_arima200)
# Building ARIMA (0, 1, 1)
ts_humidity_arima200 <- arima(ts_humidity, order = c(2,0,0))
# to conduct Ljung Box test and Residual Analysis
checkresiduals(ts_humidity_arima200)
ts_humidity_arima212 <- arima(ts_humidity, order = c(2,1,2)) # sig
ts_humidity_arima412 <- arima(ts_humidity, order = c(4,1,2)) # sig
# Auto ARIMA
auto.arima(ts_humidity, trace = T)
# Building ARIMA (0, 1, 1)
ts_humidity_arima200 <- arima(ts_humidity, order = c(2,0,0))
ts_humidity_arima012 <- arima(ts_humidity, order = c(0,1,2))
ts_humidity_arima212 <- arima(ts_humidity, order = c(2,1,2)) # sig
ts_humidity_arima412 <- arima(ts_humidity, order = c(4,1,2)) # sig
ts_humidity_arima210 <- arima(ts_humidity, order = c(2,1,0)) # own
ts_humidity_arima112 <- arima(ts_humidity, order = c(1,1,2)) # auto.arima
# to plot the TS with forecasts
plot(forecast(ts_humidity_arima200, h= 5))
plot(forecast(ts_humidity_arima112, h= 5))
# to add fitted model into the existing plot
lines(fitted(ts_humidity_arima200), col="red", lwd=2)
lines(fitted(ts_humidity_arima112), col="red", lwd=2)
# to plot the TS with forecasts
plot(forecast(ts_humidity_arima200, h= 30))
plot(forecast(ts_humidity_arima112, h= 30))
# to add fitted model into the existing plot
lines(fitted(ts_humidity_arima200), col="red", lwd=2)
lines(fitted(ts_humidity_arima112), col="red", lwd=2)
coeftest(ts_humidity_arima200)
coeftest(ts_humidity_arima012)
coeftest(ts_humidity_arima212)
coeftest(ts_humidity_arima412)
coeftest(ts_humidity_arima210)
coeftest(ts_humidity_arima112) # Sig
# to conduct Ljung Box test and Residual Analysis
checkresiduals(ts_humidity_arima200)
checkresiduals(ts_humidity_arima012)
checkresiduals(ts_humidity_arima212)
checkresiduals(ts_humidity_arima212)
checkresiduals(ts_humidity_arima412)
checkresiduals(ts_humidity_arima210)
checkresiduals(ts_humidity_arima112)
# performance matrices for ARIMA(2,0,0)
accuracy(ts_humidity_arima200) # sig - 0.4398
accuracy(ts_humidity_arima012)
accuracy(ts_humidity_arima212) # sig - 0.825
accuracy(ts_humidity_arima412) # sig - 0.661
accuracy(ts_humidity_arima210)
accuracy(ts_humidity_arima112) # sig - 0.8667
accuracy(ts_humidity_arima200) # sig - 0.4398
accuracy(ts_humidity_arima200) # sig - 0.4398
#accuracy(ts_humidity_arima012)
accuracy(ts_humidity_arima212) # sig - 0.825
accuracy(ts_humidity_arima412) # sig - 0.661
# accuracy(ts_humidity_arima210)
accuracy(ts_humidity_arima112) # sig - 0.8667
coeftest(ts_humidity_arima212) # sig - ma only
coeftest(ts_humidity_arima210) # ar2 only
coeftest(ts_humidity_arima212) # sig - ma only
coeftest(ts_humidity_arima112) # Sig
# accuracy(ts_humidity_arima210)
accuracy(ts_humidity_arima112) # sig - 0.8667
