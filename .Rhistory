# performance matrices
holts_mean_f = ts(holts_forecast$mean, frequency = 7)
# performance matrices
holts_mean_f <- ts(holts_forecast$mean, frequency = 7)
rbind(accuracy(holts_model) , accuracy(holts_mean_f, ts_testing))
# performance matrices
ses_mean_f = ts(ses_forecast$mean, frequency = 7)
rbind(accuracy(ses_model) , accuracy(ses_mean_f, ts_testing))
# ======= (iii) Linear Trend Model =======
trend <- 1:length(ts_training)
# ======= (iii) Linear Trend Model =======
trend <- 1:length(training_ts)
# ======= (iii) Linear Trend Model =======
trend_data <- 1:length(training_ts)
lr_model <- tslm(ts_training ~ trend_data)
lr_forecast <- forecast(lr_model, h=length(ts_testing))
# ======= (iii) Linear Trend Model =======
trend_data <- 1:length(training_ts)
lr_model <- tslm(ts_training ~ trend_data)
lr_forecast <- forecast(lr_model, h=length(ts_testing))
# ======= (iii) Linear Trend Model =======
trend_data <- 1:length(training_ts)
lr_model <- tslm(ts_training ~ trend_data)
lr_forecast <- forecast(lr_model, h=length(ts_testing))
# ======= (iii) Linear Trend Model =======
trend_data <- 1:length(training_ts)
trend_data <- 1:length(training_ts)
lr_model <- tslm(ts_training ~ trend_data)
lr_model <- tslm(ts_training ~ trend_data)
lr_forecast <- forecast(lr_model, h=length(ts_testing))
trend_data <- 1:length(training_ts)
lr_model <- tslm(training_ts ~ trend_data)
lr_forecast <- forecast(lr_model, h=length(ts_testing))
trend_data <- 1:length(training_ts)
lr_model <- tslm(training_ts ~ trend_data)
lr_forecast <- forecast(lr_model, h=length(testing_ts))
lr_forecast <- forecast(lr_model, h=length(testing_ts))
trend_data <- 1:length(training_ts)
lr_model <- tslm(training_ts ~ trend_data)
lr_forecast <- forecast(lr_model, h=length(testing_ts))
trend_data <- 1:length(training_ts)
lr_model <- tslm(training_ts ~ trend_data)
lr_forecast <- forecast(lr_model, h=length(testing_ts))
lr_model <- tslm(training_ts ~ trend_data)
lr_model
Summary(lr_model)
trend_data
trend_data <- 1:length(training_ts)
lr_model <- tslm(training_ts ~ trend_data)
lr_forecast <- forecast::forecast(lr_model, h=length(testing_ts))
lr_forecast <- forecast::forecast(lr_model, h=length(training_ts))
# Plot forecast and actual test data
plot(lr_forecast , main = "Forecasting using linear trend ", xlab = "Date", ylab = "Humidity",lwd=2)
lines(lr_forecast$fitted,col="red",lwd=2)
lines(lr_forecast$fitted,col="red",lwd=2)
legend("topleft", legend = c("Original","Train", "Test"), col=c("black","red","blue"), lty=2)
# Plot forecast and actual test data
plot(lr_forecast , main = "Forecasting using linear trend ", xlab = "Date", ylab = "Humidity",lwd=2)
lines(lr_forecast$fitted,col="red",lwd=2)
legend("topleft", legend = c("Original","Train", "Test"), col=c("black","red","blue"), lty=2, cex = 0.5)
trend_data <- 1:length(training_ts)
lr_model <- tslm(training_ts ~ trend_data)
lr_forecast <- forecast(lr_model, h=length(training_ts))
trend_data <- 1:length(training_ts)
lr_model <- tslm(training_ts ~ trend_data)
lr_forecast <- forecast(lr_model, h=length(testing_ts))
# plotting ACF and PACF
tsdisplay(ts_humidity)
# plotting ACF and PACF
tsdisplay(ts_humidity)
dev.off()
# plotting ACF and PACF
tsdisplay(ts_humidity)
# Building ARIMA (0, 1, 1)
ts_humidity_arima011 <- arima(ts_humidity, order = c(2,1,0))
ts_humidity_arima011 <- arima(ts_humidity, order = c(0,1,1))
ts_humidity_arima014 <- arima(ts_humidity, order = c(0,1,4))
ts_humidity_arima012 <- arima(ts_humidity, order = c(0,1,2))
ts_humidity_arima112 <- arima(ts_humidity, order = c(1,1,2)) # auto.arima
# Building ARIMA (0, 1, 1)
ts_humidity_arima210 <- arima(ts_humidity, order = c(2,1,0)) # own
ts_humidity_arima011 <- arima(ts_humidity, order = c(0,1,1))
ts_humidity_arima014 <- arima(ts_humidity, order = c(0,1,4))
ts_humidity_arima012 <- arima(ts_humidity, order = c(0,1,2))
ts_humidity_arima112 <- arima(ts_humidity, order = c(1,1,2)) # auto.arima
# Building ARIMA (0, 1, 1)
ts_humidity_arima210 <- arima(ts_humidity, order = c(2,1,0)) # own
ts_humidity_arima011 <- arima(ts_humidity, order = c(0,1,1))
ts_humidity_arima012 <- arima(ts_humidity, order = c(0,1,2))
ts_humidity_arima112 <- arima(ts_humidity, order = c(1,1,2)) # auto.arima
ts_humidity_arima210 <- arima(ts_humidity, order = c(2,1,0)) # own
ts_humidity_arima011 <- arima(ts_humidity, order = c(0,1,1))
ts_humidity_arima012 <- arima(ts_humidity, order = c(0,1,2))
ts_humidity_arima112 <- arima(ts_humidity, order = c(1,1,2)) # auto.arima
library('lmtest')
coeftest(ts_humidity_arima210)
coeftest(ts_humidity_arima011)
coeftest(ts_humidity_arima012)
coeftest(ts_humidity_arima112)
# to conduct Ljung Box test and Residual Analysis
checkresiduals(ts_humidity_arima210)
checkresiduals(ts_humidity_arima011)
checkresiduals(ts_humidity_arima012)
checkresiduals(ts_humidity_arima112)
auto.arima(ts_humidity, trace = T)
# Data partitioning using 80-20% ratio
training_ts <- ts(ts_humidity[1:(length(ts_humidity) * 0.8)],frequency = 7)
trend_data <- 1:length(training_ts)
lr_model <- tslm(training_ts ~ trend_data)
lr_forecast <- forecast(lr_model, h=length(testing_ts))
training_ts
length(training_ts)
length(testing_ts)
1:length(training_ts)
length(testing_ts)
# Import data
library('readxl')
library('forecast')
library('tseries')
library('TTR')
library('uroot')
data <- read_excel('datasets/Dubai_TSF.xlsx')
data$date <- as.Date(data$date)
# convert to TS
ts_humidity <- ts(data$humidity, start = c(2,1), frequency = 7)
length(ts_humidity)
# Data partitioning using 80-20% ratio
training_ts <- ts(ts_humidity[1:(length(ts_humidity) * 0.8)],frequency = 7)
testing_ts <- ts(ts_humidity[(length(ts_humidity) * 0.8+1):length(ts_humidity)], frequency = 7)
# check the length of dataset
length(ts_humidity)
length(training_ts)
length(testing_ts)
trend_data <- 1:length(training_ts)
lr_model <- tslm(training_ts ~ trend_data)
lr_forecast <- forecast(lr_model, h=length(testing_ts))
View(lr_model)
lr_forecast <- forecast(lr_model, newdata=data.frame(trend_data=trend_data_new))
lr_forecast <- forecast(lr_model, data.frame(trend_data))
lr_forecast <- forecast(lr_model, h=length(training_ts))
training_ts <- ts(ts_humidity[1:(length(ts_humidity)*split)], frequency = 7)
testing_ts <- ts(ts_humidity[-c(1:(length(ts_humidity)*split))], frequency = 7)
split <- 0.8
training_ts <- ts(ts_humidity[1:(length(ts_humidity)*split)], frequency = 7)
testing_ts <- ts(ts_humidity[-c(1:(length(ts_humidity)*split))], frequency = 7)
trend_data <- 1:length(training_ts)
lr_model <- tslm(training_ts ~ trend_data)
lr_forecast <- forecast(lr_model, h=length(training_ts))
# Plot forecast and actual test data
plot(lr_forecast , main = "Forecasting using linear trend ", xlab = "Date", ylab = "Humidity",lwd=2)
lines(lr_forecast$fitted,col="red",lwd=2)
legend("topleft", legend = c("Original","Train", "Test"), col=c("black","red","blue"), lty=2, cex = 0.5)
lr_forecast <- forecast(lr_model, h=length(testing_ts))
trend_data <- 1:length(training_ts)
lr_model <- tslm(training_ts ~ trend_data)
lr_forecast <- forecast(lr_model, h=length(testing_ts))
# plotting ACF and PACF
tsdisplay(ts_humidity)
ts_humidity_arima112 <- arima(ts_humidity, order = c(1,1,2)) # auto.arima
coeftest(ts_humidity_arima112) # Sig
checkresiduals(ts_humidity_arima112)
# to add fitted model into the existing plot
lines(fitted(ts_humidity_arima112), col="red", lwd=2)
# to plot the TS with forecasts
plot(forecast(ts_humidity_arima112, h= 5))
# to add fitted model into the existing plot
lines(fitted(ts_humidity_arima112), col="red", lwd=2)
data <- read_excel('datasets/Dubai_TSF_1.xlsx')
View(data)
data$date <- as.Date(data$date)
length(ts_humidity)
# convert to TS
ts_humidity <- ts(data$humidity, start = c(2,1), frequency = 7)
length(ts_humidity)
split <- 0.8
training_ts <- ts(ts_humidity[1:(length(ts_humidity)*split)], frequency = 7)
testing_ts <- ts(ts_humidity[-c(1:(length(ts_humidity)*split))], frequency = 7)
trend_data <- 1:length(training_ts)
lr_model <- tslm(training_ts ~ trend_data)
lr_forecast <- forecast(lr_model, h=length(testing_ts))
lr_forecast <- forecast::forecast(lr_model, h=length(testing_ts))
auto.arima(ts_humidity, trace = T)
tsdisplay(ts_humidity))
tsdisplay(ts_humidity)
# plotting ACF and PACF for transformed data directly
tsdisplay(diff(ts_humidity, 2))
# Building ARIMA (0, 1, 1)
ts_humidity_arima210 <- arima(ts_humidity, order = c(2,1,0)) # own
ts_humidity_arima011 <- arima(ts_humidity, order = c(0,1,3)) # o2
# Building ARIMA (0, 1, 1)
ts_humidity_arima210 <- arima(ts_humidity, order = c(2,1,0)) # own
ts_humidity_arima013 <- arima(ts_humidity, order = c(0,1,3)) # o2
# to conduct Ljung Box test and Residual Analysis
checkresiduals(ts_humidity_arima210)
checkresiduals(ts_humidity_arima013)
ts_humidity_arima112 <- arima(ts_humidity, order = c(1,1,2)) # auto.arima
checkresiduals(ts_humidity_arima112)
# to add fitted model into the existing plot
lines(fitted(ts_humidity_arima112), col="red", lwd=2)
# to plot the TS with forecasts
plot(forecast(ts_humidity_arima112, h= 5))
# to add fitted model into the existing plot
lines(fitted(ts_humidity_arima112), col="red", lwd=2)
library('readxl')
library('forecast')
library('tseries')
library('TTR')
library('uroot')
data <- read_excel('datasets/Dubai_TSF.xlsx')
View(data)
plot(data$humidity)
# convert to TS
ts_humidity <- ts(data$humidity, start = c(2,1), frequency = 7)
trend_data <- 1:length(training_ts)
lr_model <- tslm(training_ts ~ trend_data)
lr_forecast <- forecast::forecast(lr_model, h=length(testing_ts))
# Create a new sequence of integers for the forecast period
new_trend_data <- (length(training_ts) + 1):(length(training_ts) + length(testing_ts))
# Use the new sequence of integers in the forecast function
lr_forecast <- forecast::forecast(lr_model, newdata = data.frame(trend_data = new_trend_data))
# Plot forecast and actual test data
plot(lr_forecast , main = "Forecasting using linear trend ", xlab = "Date", ylab = "Humidity",lwd=2)
lines(lr_forecast$fitted,col="red",lwd=2)
legend("topleft", legend = c("Original","Train", "Test"), col=c("black","red","blue"), lty=2, cex = 0.5)
new_data <- (length(training_ts) + 1):(length(training_ts) + length(testing_ts))
lr_forecast <- forecast::forecast(lr_model, newdata = data.frame(trend_data = new_trend_data))
# Plot forecast and actual test data
plot(lr_forecast, main = "Forecasting using linear trend ", xlab = "Date", ylab = "Humidity",lwd=2)
lines(lr_forecast$fitted,col="red",lwd=2)
legend("topleft", legend = c("Original","Train", "Test"), col=c("black","red","blue"), lty=2, cex = 0.5)
# performance matrices
lr_mean_f <- ts(lr_forecast$mean, frequency = 7)
rbind(accuracy(lr_model) , accuracy(lr_mean_f, ts_testing))
rbind(accuracy(lr_model) , accuracy(lr_mean_f, testing_ts))
# performance matrices
holts_mean_f <- ts(holts_forecast$mean, frequency = 7)
rbind(accuracy(holts_model) , accuracy(holts_mean_f, testing_ts))
# ======= (ii) Holts Method =======
holts_model <- holt(training_ts, h=length(training_ts))
holts_forecast <- forecast(holts_model, h=length(ts_testing))
# ======= (ii) Holts Method =======
holts_model <- holt(training_ts, h=length(training_ts))
holts_forecast <- forecast(holts_model, h=length(testing_ts))
# performance matrices
holts_mean_f <- ts(holts_forecast$mean, frequency = 7)
rbind(accuracy(holts_model) , accuracy(holts_mean_f, testing_ts))
# Data partitioning using 80-20% ratio
training_ts <- ts(ts_humidity[1:(length(ts_humidity)*split)], frequency = 7)
testing_ts <- ts(ts_humidity[-c(1:(length(ts_humidity)*split))], frequency = 7)
# check the length of dataset
length(ts_humidity)
length(training_ts)
length(testing_ts)
# ======= (i) Simple exponential Smoothing =======
library('forecast')
ses_model <- ses(training_ts, h=length(traning_ts))
ses_model <- ses(training_ts, h=length(traning_ts))
# Data partitioning using 80-20% ratio
training_ts <- ts(ts_humidity[1:(length(ts_humidity)*split)], frequency = 7)
testing_ts <- ts(ts_humidity[-c(1:(length(ts_humidity)*split))], frequency = 7)
ses_model <- ses(training_ts, h=length(training_ts))
ses_forecast <- forecast(ses_model, h=length(testing_ts))
# ======= (i) Simple exponential Smoothing =======
library('forecast')
ses_model <- ses(training_ts, h=length(training_ts))
ses_forecast <- forecast(ses_model, h=length(testing_ts))
ses_model <- ses(training_ts, h=length(training_ts))
ses_forecast <- forecast(ses_model, h=length(testing_ts))
# Fit the Holt's model to the training data
holts_model <- holt(training_ts)
# Plot the fitted model on the training set
plot(holts_model, main = "Holts Method", xlab = "Date", ylab = "Humidity", lwd=2)
# Add the actual test data to the plot
lines(testing_ts, col="blue", lwd=2)
# Add the forecasted values to the plot
holts_forecast <- forecast(holts_model, h = length(testing_ts))
lines(holts_forecast$mean, col="red", lwd=2)
# Add a legend to the plot
legend("topleft", legend = c("Original", "Train", "Test", "Forecast"), col = c("black", "red", "blue", "green"), lty = 1, cex = 0.5)
# Plot forecast and actual test data
plot(holts_forecast , main = "Holts Method", xlab = "Date", ylab = "Humidity",lwd=2)
lines(training_ts,col="red",lwd=2)
# Plot forecast and actual test data
plot(holts_forecast , main = "Holts Method", xlab = "Date", ylab = "Humidity",lwd=2)
lines(ts_humidity,col="red",lwd=2)
holts_forecast
length(holts_forecast)
# plotting train and test
plot(ses_forecast, main = "Simple Exponential Smoothing", xlab = "Date", ylab = "Humidity",lwd=2)
lines(training_ts,col="red",lwd=2)
ses_model <- ses(training_ts, h=length(training_ts))
ses_forecast <- forecast(ses_model, h=length(testing_ts))
# plotting train and test
plot(ses_forecast, main = "Simple Exponential Smoothing", xlab = "Date", ylab = "Humidity",lwd=2)
lines(training_ts,col="red",lwd=2)
# ======= (ii) Holts Method =======
holts_model <- holt(training_ts, h=length(training_ts))
holts_forecast <- forecast(holts_model, h=length(testing_ts))
# Plot forecast and actual test data
plot(holts_forecast , main = "Holts Method", xlab = "Date", ylab = "Humidity",lwd=2)
lines(training_ts,col="red",lwd=2)
length(training_ts)
length(testing_ts)
training_ts
# Plot forecast and actual test data
plot(holts_forecast , main = "Holts Method", xlab = "Date", ylab = "Humidity",lwd=2)
lines(holts_model$fitted,col="red",lwd=2)
legend("topleft", legend = c("Original","Train", "Test"), col=c("black","red","blue"), lty=1, cex = 0.5)
# Plot forecast and actual test data
plot(holts_forecast , main = "Holts Method", xlab = "Date", ylab = "Humidity",lwd=2)
lines(holts_model$fitted,col="red",lwd=2)
# Plot forecast and actual test data
plot(holts_forecast , main = "Holts Method", xlab = "Date", ylab = "Humidity",lwd=2)
lines(fitted(holts_model),col="red",lwd=2)
# performance matrices
ses_mean_f = ts(ses_forecast$mean, frequency = 7)
rbind(accuracy(ses_model) , accuracy(ses_mean_f, testing_ts))
# performance matrices
holts_mean_f <- ts(holts_forecast$mean, frequency = 7)
rbind(accuracy(holts_model) , accuracy(holts_mean_f, testing_ts))
# performance matrices
lr_mean_f <- ts(lr_forecast$mean, frequency = 7)
rbind(accuracy(lr_model) , accuracy(lr_mean_f, testing_ts))
data <- read_excel('datasets/Madrid_ts_1.xlsx')
View(data)
# Explore variables
plot(data$temp)
# Explore variables
plot(data$temp)
plot(data$dew)
plot(data$wind)
plot(data$pressure)
typeof(data$temp)
data <- as.numeric(data)
data <- read_excel('datasets/Madrid_ts_1.xlsx')
# Import data
library('readxl')
data <- read_excel('datasets/Madrid_ts_1.xlsx')
library('forecast')
library('tseries')
library('TTR')
library('uroot')
data <- read_excel('datasets/Madrid_ts_1.xlsx')
View(data)
data$humidity <- as.numeric(as.character(data$humidity))
data <- read_excel('datasets/Madrid_ts_1.xlsx', header = T)
data <- read.csv('datasets/Madrid_ts_1.csv', header = T)
View(data)
typeof(data$humidity)
data$humidity <- as.numeric(as.character(data$humidity))
data$humidity <- as.double(as.character(data$humidity))
plot(data$humidity)
data$humidity <- as.double(as.character(data$humidity))
plot(data$humidity)
# convert to TS
ts_humidity <- ts(data$humidity, start = c(2,1), frequency = 7)
# Import data
library('readxl')
data <- read_excel('datasets/madrid.xlsx')
typeof(data$humidity)
# Explore variables
plot(data$temp)
# Explore variables
plot(data$temp)
plot(data$dew)
data <- read_excel('datasets/madrid.xlsx')
plot(data$humidity)
plot(data$dew)
# Explore variables
plot(data$temp)
plot(data$dew)
plot(data$pressure)
plot(data$wind)
# Explore variables
plot(data$temp)
plot(data$humidity)
plot(data$wind)
plot(data$humidity)
plot(data$wind)
# convert to TS
ts_humidity <- ts(data$humidity, start = c(2,1), frequency = 7)
length(ts_humidity)
View(ts_humidity)
adf.test(ts_humidity)
# ADF test for stationary
library('tseries')
# Import data
library('readxl')
library('forecast')
library('tseries')
library('TTR')
library('uroot')
adf.test(ts_humidity)
mk.test(ts_humidity)
# any trend ?
# install.packages('trend')
library('trend')
mk.test(ts_humidity)
# any seasonal ?
# install.packages('seastests')
library('seastests')
isSeasonal(ts_humidity)
# Data partitioning using 80-20% ratio
training_ts <- ts(ts_humidity[1:(length(ts_humidity)*split)], frequency = 7)
testing_ts <- ts(ts_humidity[-c(1:(length(ts_humidity)*split))], frequency = 7)
# check the length of dataset
length(ts_humidity)
length(training_ts)
length(testing_ts)
# ======= (i) Simple exponential Smoothing =======
library('forecast')
ses_model <- ses(training_ts, h=length(training_ts))
ses_forecast <- forecast(ses_model, h=length(testing_ts))
# plotting train and test
plot(ses_forecast, main = "Simple Exponential Smoothing", xlab = "Date", ylab = "Humidity",lwd=2)
lines(ses_model$fitted,col="red",lwd=2)
legend("topleft", legend = c("Original","Train", "Test"), col=c("black","red","blue"), lty=1, cex = 0.5)
# convert to TS
ts_humidity <- ts(data$wind, start = c(2,1), frequency = 7)
length(ts_humidity)
View(ts_humidity)
# TS plot
plot(ts_humidity)
adf.test(ts_humidity)
# ADF plot for stationary
Acf(ts_humidity, ylim=c(-1,1))
# Data partitioning using 80-20% ratio
training_ts <- ts(ts_humidity[1:(length(ts_humidity)*split)], frequency = 7)
testing_ts <- ts(ts_humidity[-c(1:(length(ts_humidity)*split))], frequency = 7)
# check the length of dataset
length(ts_humidity)
length(training_ts)
length(testing_ts)
# ======= (i) Simple exponential Smoothing =======
library('forecast')
ses_model <- ses(training_ts, h=length(training_ts))
ses_forecast <- forecast(ses_model, h=length(testing_ts))
# plotting train and test
plot(ses_forecast, main = "Simple Exponential Smoothing", xlab = "Date", ylab = "Humidity",lwd=2)
lines(ses_model$fitted,col="red",lwd=2)
data <- read_excel('datasets/Japan_Weather.xlsx')
View(data)
typeof(data$humidity)
plot(data$Avg_Humidity)
# convert to TS
ts_humidity <- ts(data$Avg_Humidity, start = c(2,1), frequency = 7)
length(ts_humidity)
View(ts_humidity)
# TS plot
plot(ts_humidity)
# Data partitioning using 80-20% ratio
training_ts <- ts(ts_humidity[1:(length(ts_humidity)*split)], frequency = 7)
testing_ts <- ts(ts_humidity[-c(1:(length(ts_humidity)*split))], frequency = 7)
# ======= (i) Simple exponential Smoothing =======
library('forecast')
ses_model <- ses(training_ts, h=length(training_ts))
ses_forecast <- forecast(ses_model, h=length(testing_ts))
# plotting train and test
plot(ses_forecast, main = "Simple Exponential Smoothing", xlab = "Date", ylab = "Humidity",lwd=2)
lines(ses_model$fitted,col="red",lwd=2)
legend("topleft", legend = c("Original","Train", "Test"), col=c("black","red","blue"), lty=1, cex = 0.5)
data <- read_excel('datasets/madrid.xlsx')
# convert to TS
ts_humidity <- ts(data$wind, start = c(2,1), frequency = 7)
View(data)
# Data partitioning using 80-20% ratio
training_ts <- ts(ts_humidity[1:(length(ts_humidity)*split)], frequency = 7)
testing_ts <- ts(ts_humidity[-c(1:(length(ts_humidity)*split))], frequency = 7)
# check the length of dataset
length(ts_humidity)
length(training_ts)
length(testing_ts)
ses_model <- ses(training_ts, h=length(training_ts))
ses_forecast <- forecast(ses_model, h=length(testing_ts))
# plotting train and test
plot(ses_forecast, main = "Simple Exponential Smoothing", xlab = "Date", ylab = "Humidity",lwd=2)
lines(ses_model$fitted,col="red",lwd=2)
legend("topleft", legend = c("Original","Train", "Test"), col=c("black","red","blue"), lty=1, cex = 0.5)
# performance matrices
ses_mean_f = ts(ses_forecast$mean, frequency = 7)
rbind(accuracy(ses_model) , accuracy(ses_mean_f, testing_ts))
# ======= (ii) Holts Method =======
holts_model <- holt(training_ts, h=length(training_ts))
holts_forecast <- forecast(holts_model, h=length(testing_ts))
# Plot forecast and actual test data
plot(holts_forecast , main = "Holts Method", xlab = "Date", ylab = "Humidity",lwd=2)
lines(fitted(holts_model),col="red",lwd=2)
legend("topleft", legend = c("Original","Train", "Test"), col=c("black","red","blue"), lty=1, cex = 0.5)
# performance matrices
holts_mean_f <- ts(holts_forecast$mean, frequency = 7)
rbind(accuracy(holts_model) , accuracy(holts_mean_f, testing_ts))
trend_data <- 1:length(training_ts)
lr_model <- tslm(training_ts ~ trend_data)
new_data <- (length(training_ts) + 1):(length(training_ts) + length(testing_ts))
lr_forecast <- forecast::forecast(lr_model, newdata = data.frame(trend_data = new_trend_data))
lr_forecast <- forecast::forecast(lr_model, newdata = data.frame(trend_data = new_data))
# Plot forecast and actual test data
plot(lr_forecast, main = "Forecasting using linear trend ", xlab = "Date", ylab = "Humidity",lwd=2)
lines(lr_forecast$fitted,col="red",lwd=2)
legend("topleft", legend = c("Original","Train", "Test"), col=c("black","red","blue"), lty=2, cex = 0.5)
# performance matrices
lr_mean_f <- ts(lr_forecast$mean, frequency = 7)
rbind(accuracy(lr_model) , accuracy(lr_mean_f, testing_ts))
# performance matrices
ses_mean_f = ts(ses_forecast$mean, frequency = 7)
rbind(accuracy(ses_model) , accuracy(ses_mean_f, testing_ts))
# performance matrices
holts_mean_f <- ts(holts_forecast$mean, frequency = 7)
rbind(accuracy(holts_model) , accuracy(holts_mean_f, testing_ts))
# performance matrices
lr_mean_f <- ts(lr_forecast$mean, frequency = 7)
rbind(accuracy(lr_model) , accuracy(lr_mean_f, testing_ts))
