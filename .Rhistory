testting_beer
tsdisplay(training_beer, lag.max = 60)
adf.test(training_beer)
ch.test(training_beer)
ndiff(training_beer)
nsdiffs(training_beer)
ndiffs(training_beer)
nsdiffs(training_beer)
tsdisplay(diff(diff(training_beer,1),12)
tsdisplay(diff(diff(training_beer,1),12))
tsdisplay(diff(diff(training_beer,1),12))
beer
View(beer)
beer
Sales
# to get the p-value of t-test in the model
# install.packages('lmtest')
library('lmtest')
coeftest(avegrowthpop_arima011)
# to generate the unknown parameters/coefficient(s)
summary(avegrowthpop_arima011)
# to conduct Ljung Box test and Residual Analysis
checkresiduals(avegrowthpop_arima011) # from forecast package
checkresiduals(quakes_arima011)
checkresiduals(quakes_arima101)
# comparing their performance between our model and auto.arima
accuracy(quakes_arima011)
accuracy(quakes_arima101)
# to conduct forecasts (forecast pack)
# this is a yearly data and will forecast for next five years
forecast(quakes_arima101, h = 5)
# to plot the TS with forecasts
plot(forecast(quakes_arima101, h= 5))
library('forecast')
# to conduct forecasts (forecast pack)
# this is a yearly data and will forecast for next five years
forecast(quakes_arima101, h = 5)
# to plot the TS with forecasts
plot(forecast(quakes_arima101, h= 5))
# to add fitted model into the existing plot
lines(fitted(quakes_arima101), col=8, lwd=2)
# to conduct Ljung Box test and Residual Analysis
checkresiduals(avegrowthpop_arima011) # from forecast package
data = read.csv('Dubai_weather_modified.csv')
data = read.csv('datasets/Dubai_weather_modified.csv')
plot(data$temp_avg.)
plot(data$temp_avg)
ts_temp = ts(data$temp_avg., frequency = 7)
plot(ts_temp)
ts_temp = ts(data$temp_avg.)
plot(ts_temp)
plot(data$temp_avg.)
typeof(data$temp_avg.)
ts_temp_num <- as.numeric(data$temp_avg.)
data = read.excel('datasets/Dubai_weather_modified.xlsx')
library('readxl)
library(readxl)
library("readxl")
data = read.excel('datasets/Dubai_weather_modified.xlsx')
data = read_excel('datasets/Dubai_weather_modified.xlsx')
ts_temp = ts(data$temp_avg.)
ts_temp = ts(data$`temp_avg `)
plot(ts_temp)
ts_temp = ts(data$`temp_avg `)
ts_temp
plot(ts_temp)
is.na(data)
sum(is.na(data))
view(data)
View(data)
typeof(data$`temp_avg `)
ts_temp = ts((as.numeric(data$`temp_avg `)
ts_temp = ts((as.numeric(data$`temp_avg `))
data = read_excel('datasets/Dubai_weather_modified.xlsx')
View(data)
typeof(data$`temp_avg `)
typeof(data$temp_avg)
ts_temp = ts((as.numeric(data$temp_avg))
plot(ts_temp)
data = read_excel('datasets/Dubai_weather_modified.xlsx')
View(data)
typeof(data$temp_avg)
data = read_excel('datasets/Dubai_weather_modified.xlsx')
View(data)
typeof(data$temp_avg)
ts_temp = ts((as.numeric(data$temp_avg))
plot(ts_temp)
sum(is.na(data))
ts_temp = ts((as.numeric(data$temp_avg))
data$temo_avg= as.numeric(data$temp_avg)
data$temp_avg= as.numeric(data$temp_avg)
my_vector <- ifelse(data$temp_avg == 0, NA, my_vector)
sum(is.na(my_vector))
my_vector
data = read_excel('datasets/Dubai_weather_modified.xlsx')
typeof(data$temp_avg)
View(data)
my_vector <- ifelse(data$temp_avg == 0, NA, my_vector)
sum(is.na(my_vector))
my_vector
data$temp_avg= as.numeric(data$temp_avg)
plot(ts_temp)
sum(is.na(data))
data = read_excel('datasets/Dubai_TSF.xlsx')
View(data)
typeof(data$temp_avg)
typeof(data$temp)
my_vector <- ifelse(data$temp_avg == 0, NA, my_vector)
my_vector <- ifelse(data$temp == 0, NA, my_vector)
sum(is.na(my_vector))
my_vector
data$temp
plot(data$temp)
colnames(data)
plot(data$temp)
plot(data$dew)
plot(data$humidity)
plot(data$wind)
plot(data$pressure)
plot(data$dew)
plot(data$humidity)
ts_temp <- ts(data$temp, start = c(2,1), frequency = 7)
plot(ts_temp)
decompose(ts_temp)
plot(decompose(ts_temp))
ACF(ts_temp)
acf(ts_temp)
library('forecast')
tsdisplay(ts_temp)
plot(decompose(ts_temp))
my_vector <- ifelse(data$temp == 0, NA, my_vector)
tsdisplay(ts_temp)
tsdisplay(ts_temp)
tsdisplay(ts_temp)
library('forecast')
tsdisplay(ts_temp)
# Close all plot windows
dev.off()
tsdisplay(ts_temp)
auto.arima(ts_temp, trace = T)
ch.test(ts_temp)
library("tseries")
ch.test(ts_temp)
ndiffs(ts_temp)
tsdisplay(diff(ts_temp,1))
tsdisplay(diff(ts_temp,2))
auto.arima(ts_temp, trace = T)
acf(ts_temp, ylim = c(-2,1))
tsdisplay(diff(ts_temp,2))
ch.test(ts_temp)
library('uroot')
ch.test(ts_temp)
plot(data$wind)
ts_temp <- ts(data$wind, start = c(2,1), frequency = 7)
plot(ts_temp)
# trend
install.packages('trend')
library('trend')
ts_wind <- ts(data$wind, start = c(2,1), frequency = 7)
plot(ts_wind)
mk.test(ts_wind)
# test seasonal
install.packages('seastests')
isSeasonal(ts_wind)
library('seastests')
isSeasonal(ts_wind)
acf(ts_wind, ylim = c(-2,1))
adf.test(ts_wind)
library('tseries')
adf.test(ts_wind)
ts_wind <- ts(data$humidity, start = c(2,1), frequency = 7)
plot(ts_wind)
adf.test(ts_wind)
# trend
install.packages('trend')
mk.test(ts_wind)
auto.arima(ts_temp, trace = T)
library("tseries")
library('uroot')
# convert to TS
ts_wind <- ts(data$humidity, start = c(2,1), frequency = 7)
plot(ts_wind)
adf.test(ts_wind)
mk.test(ts_wind)
# convert to TS
ts_wind <- ts(data$wind, start = c(2,1), frequency = 7)
mk.test(ts_wind)
acf(ts_wind, ylim = c(-2,1))
# convert to TS
ts_humidity <- ts(data$humidity, start = c(2,1), frequency = 7)
# convert to TS
ts_humidity <- ts(data$humidity, start = c(2,1), frequency = 7)
# TS plot
plot(ts_humidity)
adf.test(ts_humidity)
mk.test(ts_humidity)
# convert to TS
ts_humidity <- ts(data$humidity, start = c(2,1), frequency = 7)
adf.test(ts_humidity)
mk.test(ts_humidity)
isSeasonal(ts_humidity)
# ACF plot
acf(ts_humidity, ylim = c(-2,1))
# ACF plot
acf(ts_humidity)
adf.test(ts_humidity)
# ACF plot
acf(ts_humidity)
Auto ARIMA
# Import data
library("readxl")
data = read_excel('datasets/Dubai_TSF.xlsx')
View(data)
# Explore variables
plot(data$temp)
# Import data
library("readxl")
data = read_excel('datasets/Dubai_TSF.xlsx')
View(data)
# Explore variables
plot(data$temp)
plot(data$dew)
plot(data$humidity)
plot(data$wind)
plot(data$pressure)
# convert to TS
ts_humidity <- ts(data$humidity, start = c(2,1), frequency = 7)
plot(data$humidity)
# convert to TS
ts_humidity <- ts(data$humidity, start = c(2,1), frequency = 7)
# TS plot
plot(ts_humidity)
adf.test(ts_humidity)
mk.test(ts_humidity)
isSeasonal(ts_humidity)
# ACF plot
Acf(ts_humidity)
# ACF plot
library('forecast')
Acf(ts_humidity)
# convert to TS
ts_humidity <- ts(data$wind, start = c(2,1), frequency = 7)
# TS plot
plot(ts_humidity)
adf.test(ts_humidity)
mk.test(ts_humidity)
isSeasonal(ts_humidity)
Acf(ts_humidity)
tsdisplay(diff(ts_temp,2))
tsdisplay(ts_humidity)
tsdisplay(diff(ts_humidity,1))
tsdisplay(ts_humidity)
# Import data
library("readxl")
data = read_excel('datasets/Dubai_TSF.xlsx')
View(data)
plot(data$humidity)
# convert to TS
ts_humidity <- ts(data$humidity, start = c(2,1), frequency = 7)
# TS plot
plot(ts_humidity)
ts_training <- ts(ts_humidity[1:(length(ts_humidity) * 0.8)], frequency = 7)
ts_testing  <- ts(ts_humidity[-c(1:(length(ts_humidity) * 0.8))], frequency = 7)
length(ts_testing)
ts_humidity_ses <- ses(ts_training, h=84)
library('forecast')
ts_humidity_ses <- ses(ts_training, h=84)
View(ts_humidity_ses)
ts_humidity_ses
plot(ts_humidity, main = "Humidity - SES Method Forecast", xlab = "day", ylab = "'F")
lines(ts_humidity$fitted, col=2, lwd=2)
lines(ts_humidity_ses$fitted, col=2, lwd=2)
ts_humidity_ses <- ses(ts_training)
plot(ts_humidity, main = "Humidity - SES Method Forecast", xlab = "day", ylab = "'F")
lines(ts_humidity_ses$fitted, col=2, lwd=2)
ts_humidity_ses_forecast <- forecast(ts_humidity_ses, h = length(ts_testing))
length(ts_testing)
ts_humidity_ses <- ses(ts_training)
ts_humidity_ses_forecast <- forecast::forecast(ts_humidity_ses, h = length(ts_testing))
ts_humidity_ses_forecast <- forecast::forecast(ts_humidity_ses, h = 84)
ts_humidity_ses <- ses(ts_training, h= 84)
plot(ts_humidity, main = "Humidity - SES Method Forecast", xlab = "day", ylab = "'F")
lines(ts_humidity_ses$fitted, col=2, lwd=2)
ts_humidity_ses_forecast <- forecast::forecast(ts_humidity_ses, h = 84)
lines(ts_humidity_ses_forecast, col=3, lwd=3)
# ARIMA model
tsdisplay(ts_humidity)
ts_humidity_ses_forecast <- forecast::forecast(ts_humidity_ses, h = 84)
lines(ts_humidity_ses_forecast, col=3, lwd=2)
ts_humidity_ses_forecast
ts_humidity_ses_forecast <- ts(forecast::forecast(ts_humidity_ses, h = 84), frequency = 7)
plot(ts_humidity, main = "Humidity - SES Method Forecast", xlab = "day", ylab = "'F")
plot(ts_humidity, main = "Humidity - SES Method Forecast", xlab = "day", ylab = "'F")
lines(ts_humidity_ses$fitted, col=2, lwd=2)
ts_humidity_ses_forecast <- ts(forecast::forecast(ts_humidity_ses, h = 84), frequency = 7)
lines(ts_humidity_ses_forecast, col=3, lwd=2)
autoplot(ts_humidity_ses)
lines(ts_humidity_ses_forecast, col=3, lwd=2)
lines(ts_humidity_ses$fitted, col=2, lwd=2)
# Holt's method
ts_humidity_holts <- holt(ts_training, h=84)
autoplot(ts_humidity_holts)
summary(ts_humidity_holts)
plot(ts_humidity_holts, main = "Humidity - Holt's Method Forecast", xlab = "day", ylab = "'F")
lines(ts_humidity_holts$fitted, col=2, lwd=2)
plot(ts_humidity, main = "Humidity - Holt's Method Forecast", xlab = "day", ylab = "'F")
lines(ts_humidity_holts$fitted, col=2, lwd=2)
plot(ts_humidity_holts, main = "Humidity - Holt's Method Forecast", xlab = "day", ylab = "'F")
lines(ts_humidity_holts$fitted, col=2, lwd=2)
# Holt's method
ts_humidity_holts <- holt(ts_training, h=84)
autoplot(ts_humidity_holts)
summary(ts_humidity_holts)
plot(ts_humidity_holts, main = "Humidity - Holt's Method Forecast", xlab = "day", ylab = "'F")
lines(ts_humidity_holts$fitted, col=2, lwd=2)
legend("topright", c("Acutal", "Fitted", "Forecast"), col = 1:3, lwd = 2, cex = 0.5)
legend("topright", c("Acutal", "Fitted", "Forecast"), col = c(1,2), lwd = 2, cex = 0.5)
legend("topright", c("Acutal", "Fitted", "Forecast"), col = c(1,2,3), lwd = 2, cex = 0.5)
legend("topright", c("Acutal", "Fitted", "Forecast"), col = c(1,2,4), lwd = 2, cex = 0.5)
legend("topleft", c("Acutal", "Fitted", "Forecast"), col = c(1, 2, 4), lwd = 2, cex = 0.5)
# Fit a linear trend model to the data
ts_humidity_ltm <- lm(ts_humidity ~ time(ts_humidity))
# Print the model summary
summary(model)
# Print the model summary
summary(ts_humidity_ltm)
# Print the model summary
summary(ts_humidity_ltm)
# Plot the data and the trend line
plot(ts_humidity, main = "Linear Trend Model", xlab = "day", ylab = "'F")
abline(ts_humidity_ltm, col = "red")
# Generate a forecast for the next 5 time periods
forecast_data <- forecast::forecast(ts_humidity_ltm, h = 84)
# Generate a forecast for the next 5 time periods
forecast_data <- forecast::forecast(ts_humidity_ltm, h = 84)
# Create a new time series object for the forecast period
new_data <- ts(rep(0, 84), start = end(data) + 1, frequency = frequency(data))
# Generate a forecast for the next 84 time periods
forecast_data <- forecast::forecast(model, newdata = new_data)
# Generate a forecast for the next 84 time periods
forecast_data <- forecast::forecast(ts_humidity_ltm, newdata = new_data)
# Generate a forecast for the next 84 time periods
forecast_data <- forecast::forecast(ts_humidity_ltm, newdata = ts_testing)
# Fit a linear trend model to the data using dynlm
library(dynlm)
model <- dynlm(ts_training ~ trend)
ts_training <- ts(ts_humidity[1:(length(ts_humidity) * 0.8)], frequency = 7)
model <- dynlm(ts_training ~ trend)
model <- dynlm(data ~ trend)
ts_humidity_decompose_add <- decompose(ts_humidity, type = "additive")
plot(ts_humidity_decompose_add) #random means the error plot
ts_humidity_decompose_add <- decompose(ts_humidity, type = "additive")
ts_humidity_decompose_add <- decompose(ts_training, type = "additive")
plot(ts_humidity_decompose_add) #random means the error plot
decomposition_additive$figure #to give adjusted seasonal variation values # the avg. is nearly 0
ts_humidity_decompose_add <- decompose(ts_training, type = "additive", h=84)
forecast(ts_humidity_decompose_add, h = 84)
forecast::forecast(ts_humidity_decompose_add, h = 84)
plot(ts_humidity)
lines(ts_humidity_decompose_add$figure)
lines(ts_humidity_decompose_add$figure, col(1))
lines(ts_humidity_decompose_add$figure, col=1)
lines(ts_humidity_decompose_add$figure, col=2)
ts_humidity_decompose_add <- stlf(ts_training, h=84)
summary(ts_humidity_decompose_add)
autoplot(ts_humidity_decompose_add)
plot(ts_humidity, main = "Humidity - Holt's Method Forecast", xlab = "day", ylab = "'F")
plot(ts_humidity, main = "Humidity - Decompose Method Forecast", xlab = "day", ylab = "'F")
lines(ts_humidity_decompose_add$fitted, col=2, lwd=2)
autoplot(ts_humidity_decompose_add)
lines(ts_humidity_decompose_add$fitted, col=2, lwd=2)
abline(ts_humidity_decompose_add$fitted, col=2, lwd=2)
data$date <- as.Date(data$date)
# Import data
library("readxl")
data = read_excel('datasets/Dubai_TSF.xlsx')
# Explore variables
plot(data$temp)
data$date <- as.Date(data$date)
# convert to TS
ts_humidity <- ts(data$humidity, start = c(2,1), frequency = 7)
length(ts_humidity)
# TS plot
plot(ts_humidity)
plot(ts_humidity, main = "Humidity - Decompose Method Forecast", xlab = "day", ylab = "'F")
abline(ts_humidity_decompose_add$mean, col=2, lwd=2)
plot(ts_humidity, main = "Humidity - Decompose Method Forecast", xlab = "day", ylab = "'F")
plot(x = data$date, y= data$humidity, main = "Humidity - Decompose Method Forecast", xlab = "day", ylab = "'F")
plot(x = data$date, y= data$humidity, type = 'l', main = "Humidity - Decompose Method Forecast", xlab = "day", ylab = "'F")
lines(x = data$date[n:length(ts_training)]), y = ts_humidity_decompose_add$fitted, col = 2, lwd = 2)
plot(x = data$date, y= data$humidity, type = 'l', main = "Humidity - Decompose Method Forecast", xlab = "day", ylab = "'F")
lines(x = data$date[n:length(ts_training)], y = ts_humidity_decompose_add$fitted, col = 2, lwd = 2)
lines(x = data$date[1:length(ts_training)], y = ts_humidity_decompose_add$fitted, col = 2, lwd = 2)
lines(x = data$date[length(ts_training)+1:length(ts_training)], y = ts_humidity_decompose_add$mean, col = 2, lwd = 2)
forecast <- forecast(ts_humidity_decompose_add, h = length(ts_testing))
ts_humidity_decompose_add$
summary(ts_humidity_decompose_add)
ts_humidity_decompose_add <- stlf(ts_training, h=84)
forecast <- forecast(ts_humidity_decompose_add, h = 84)
lines(x = data$date[length(ts_training)+1:length(ts_training)], y = forecast, col = 2, lwd = 2)
length(ts_training)
length(ts_training)+1
length(ts_training)
length(ts_testing)
length(ts_training)+1:length(ts_testing)
lines(x = data$date[length(ts_training)+1:length(ts_testing)], y = forecast, col = 2, lwd = 2)
length(forecast)
length(forecast)
summary(forecast)
ts_humidity_decompose_add$
summary(ts_humidity_decompose_add)
summary(ts_humidity_decompose_add)
length(data$date)
ts_humidity_decompose_add <- stlf(ts_training)
ts_humidity_decompose_add$
summary(ts_humidity_decompose_add)
summary(ts_humidity_decompose_add)
plot(x = data$date, y= data$humidity, type = 'l', main = "Humidity - Decompose Method Forecast", xlab = "day", ylab = "'F")
plot(x = data$date, y= data$humidity, type = 'l', main = "Humidity - Decompose Method Forecast", xlab = "day", ylab = "'F")
lines(x = data$date[1:length(ts_training)], y = ts_humidity_decompose_add$fitted, col = 2, lwd = 2)
forecast <- forecast(ts_humidity_decompose_add, h = 84)
length(ts_testing)
forecast <- forecast(ts_humidity_decompose_add, h = length(ts_testing))
forecast <- forecast::forecast(ts_humidity_decompose_add, h = length(ts_testing))
forecast <- forecast::forecast(ts_humidity_decompose_add, h = 420)
forecast <- forecast::forecast(ts_humidity_decompose_add, h = 84)
library("TTR")
ts_humidity_ema7 <- EMA(ts_training, 7)
# plotting ACF and PACF
tsdisplay(ts_humidity)
# testing stationary
adf.test(ts_humidity) # => Not stationary
# testing stationary
library('tseries')
adf.test(ts_humidity) # => Not stationary
# getting recommended number of diff.
ndiffs(ts_humidity)
# plotting ACF and PACF for transformed data directly
tsdisplay(diff(ts_humidity, 1))
# plotting ACF and PACF for transformed data directly
tsdisplay(diff(ts_humidity, 1))
# Building ARIMA (0, 1, 1)
ts_humidity_arima011 <- arima(ts_humidity, order = c(0,1,1))
# to generate the unknown parameters/coefficient(s)
summary(ts_humidity_arima011)
coeftest(ts_humidity_arima011)
library('lmtest')
coeftest(ts_humidity_arima011)
coeftest(ts_humidity_arima011)
# # to conduct Ljung Box test and Residual Analysis
checkresiduals(ts_humidity_arima011)
# plotting ACF and PACF for transformed data directly
tsdisplay(diff(ts_humidity, 2))
# Building ARIMA (0, 1, 1)
ts_humidity_arima011 <- arima(ts_humidity, order = c(0,2,1))
coeftest(ts_humidity_arima011)
# # to conduct Ljung Box test and Residual Analysis
checkresiduals(ts_humidity_arima011)
auto.arima(ts_humidity, trace = T)
auto.arima(ts_humidity, trace = T)
# Building ARIMA (0, 1, 1)
ts_humidity_arima011 <- arima(ts_humidity, order = c(1,1,2))
# # to conduct Ljung Box test and Residual Analysis
checkresiduals(ts_humidity_arima011)
# Building ARIMA (0, 1, 1)
ts_humidity_arima011 <- arima(ts_humidity, order = c(0,1,1))
nsdiffs(ts_humidity)
# plotting ACF and PACF for transformed data directly
tsdisplay(diff(ts_humidity, 2))
auto.arima(ts_humidity, trace = T)
# plotting ACF and PACF for transformed data directly
tsdisplay(diff(ts_humidity, 1))
# Building ARIMA (0, 1, 1)
ts_humidity_arima011 <- arima(ts_humidity, order = c(0,1,2))
# Building ARIMA (0, 1, 1)
ts_humidity_arima012 <- arima(ts_humidity, order = c(0,1,2))
ts_humidity_arima0112 <- arima(ts_humidity, order = c(1,1,2))
ts_humidity_arima112 <- arima(ts_humidity, order = c(1,1,2))
checkresiduals(ts_humidity_arima112)
# Building ARIMA (0, 1, 1)
ts_humidity_arima011 <- arima(ts_humidity, order = c(0,1,1))
ts_humidity_arima012 <- arima(ts_humidity, order = c(0,1,2))
ts_humidity_arima112 <- arima(ts_humidity, order = c(1,1,2)) # auto.arima
coeftest(ts_humidity_arima011)
coeftest(ts_humidity_arima012)
coeftest(ts_humidity_arima112)
# plotting ACF and PACF for transformed data directly
tsdisplay(diff(ts_humidity, 1))
# Building ARIMA (0, 1, 1)
ts_humidity_arima011 <- arima(ts_humidity, order = c(0,1,1))
ts_humidity_arima012 <- arima(ts_humidity, order = c(0,1,2))
ts_humidity_arima112 <- arima(ts_humidity, order = c(1,1,2)) # auto.arima
coeftest(ts_humidity_arima011)
coeftest(ts_humidity_arima012)
coeftest(ts_humidity_arima112)
# to conduct Ljung Box test and Residual Analysis
checkresiduals(ts_humidity_arima011)
checkresiduals(ts_humidity_arima012)
checkresiduals(ts_humidity_arima112)
# to plot the TS with forecasts
plot(forecast(ts_humidity_arima112, h= 5))
# to add fitted model into the existing plot
lines(fitted(ts_humidity_arima112), col=8, lwd=2)
# to add fitted model into the existing plot
lines(fitted(ts_humidity_arima112), col=2, lwd=2)
# to add fitted model into the existing plot
lines(fitted(ts_humidity_arima112), col="blue", lwd=2)
# plotting ACF and PACF for transformed data directly
tsdisplay(diff(ts_humidity, 2))
ts_humidity_arima014 <- arima(ts_humidity, order = c(0,1,4))
coeftest(ts_humidity_arima114)
ts_humidity_arima014 <- arima(ts_humidity, order = c(0,1,4))
