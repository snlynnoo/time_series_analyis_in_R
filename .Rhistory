coeftest(ts_humidity_arima111)
# accuracy(ts_humidity_arima210)
accuracy(ts_humidity_arima111) # sig - 0.8667
checkresiduals(ts_humidity_arima111) # sig - 0.8667
accuracy(ts_humidity_arima112)
#accuracy(ts_humidity_arima012)
accuracy(ts_humidity_arima212) # sig - 0.825
ts_humidity_arima111 <- arima(ts_humidity, order = c(1,1,1))
coeftest(ts_humidity_arima111)
ts_humidity_arima112 <- arima(ts_humidity, order = c(1,1,2)) # auto.arima  # sig - 0.8667
ts_humidity_arima212 <- arima(ts_humidity, order = c(2,1,2)) # sig - 0.825
#accuracy(ts_humidity_arima012)
accuracy(ts_humidity_arima212) # sig - 0.825
accuracy(ts_humidity_arima112)
# accuracy(ts_humidity_arima210)
accuracy(ts_humidity_arima111) # sig - 0.8667
# plotting ACF and PACF for transformed data directly
tsdisplay(diff(ts_humidity, 1))
# Auto ARIMA
auto.arima(ts_humidity, trace = T)
# plotting ACF and PACF for transformed data directly
tsdisplay(diff(ts_humidity, 1))
dev.off()
# Auto ARIMA
auto.arima(ts_humidity, trace = T)
# plotting ACF and PACF for transformed data directly
tsdisplay(diff(ts_humidity, 1))
library('dplyr')
shapiro.test(ts_humidity_arima112$residuals)
shapiro.test(ts_humidity_arima111$residuals)
shapiro.test(ts_humidity_arima211$residuals)
# Auto ARIMA
auto.arima(ts_humidity, trace = T)
# accuracy(ts_humidity_arima210)
accuracy(ts_humidity_arima111) # sig - 0.8667
checkresiduals(ts_humidity_arima111) # sig - 0.8667
# Building ARIMA (0, 1, 1)
ts_humidity_arima212 <- arima(ts_humidity, order = c(2,1,2))
ts_humidity_arima112 <- arima(ts_humidity, order = c(1,1,2))
# to generate the unknown parameters/coefficient(s)
summary(ts_humidity_arima212)
summary(ts_humidity_arima112)
# performance matrices
accuracy(ts_humidity_arima212)
accuracy(ts_humidity_arima112)
# to plot the TS with forecasts
plot(forecast(ts_humidity_arima212, h= 30))
# to add fitted model into the existing plot
lines(fitted(ts_humidity_arima212), col="red", lwd=2)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 1.3)
# to plot the TS with forecasts
plot(forecast(ts_humidity_arima212, h= 30))
# to add fitted model into the existing plot
lines(fitted(ts_humidity_arima212), col="red", lwd=2)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 0.5)
# to plot the TS with forecasts
plot(forecast(ts_humidity_arima212, h= 30), ylim = (-20, 120))
# to plot the TS with forecasts
plot(forecast(ts_humidity_arima212, h= 30), ylim = c(-20, 120))
# to add fitted model into the existing plot
lines(fitted(ts_humidity_arima212), col="red", lwd=2)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 0.5)
# Plot forecast and actual test data
plot(lr_forecast, main = "Forecasts using Linear Trend Model", xlab = "Day", ylab = "Humidity (%)",lwd=2)
# Plot forecast and actual test data
plot(holts_forecast , main = "Forecasts using Holts Method", xlab = "Day", ylab = "Humidity (%)",lwd=2)
lines(fitted(holts_model),col="red",lwd=2)
# Plot forecast and actual test data
plot(holts_forecast , main = "Forecasts using Holts Method", xlab = "Day", ylab = "Humidity (%)",lwd=2, ylim = c(0,100))
lines(fitted(holts_model),col="red",lwd=2)
legend("topleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 1.3)
# Plot forecast and actual test data
plot(holts_forecast , main = "Forecasts using Holts Method", xlab = "Day", ylab = "Humidity (%)",lwd=2, ylim = c(0,100))
lines(fitted(holts_model),col="red",lwd=2)
# to generate the unknown parameters/coefficient(s)
summary(ts_humidity_arima212)
# Auto ARIMA
auto.arima(ts_humidity, trace = T)
# Building ARIMA (0, 1, 1)
ts_humidity_arima212 <- arima(ts_humidity, order = c(2,1,2))
ts_humidity_arima112 <- arima(ts_humidity, order = c(1,1,2))
# to generate the unknown parameters/coefficient(s)
summary(ts_humidity_arima212)
summary(ts_humidity_arima112)
# to conduct Ljung Box test and Residual Analysis
checkresiduals(ts_humidity_arima212)
checkresiduals(ts_humidity_arima112)
?SES()
?SES
??SES
# to test the significant of the coefficients
coeftest(ts_humidity_arima212)
coeftest(ts_humidity_arima112)
# ACF plot for stationary
Acf(ts_humidity, main="Autocorrelation Plot for Humidity")
summary(data)
summary(data$humidity)
# performance matrices
accuracy(ts_humidity_arima212)
accuracy(ts_humidity_arima112)
# to plot the TS with forecasts
plot(forecast(ts_humidity_arima212, h= 30))
# to add fitted model into the existing plot
lines(fitted(ts_humidity_arima212), col="red", lwd=2)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 0.5)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 0.8)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 0.9)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 1)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 0.9)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 0.95)
# to plot the TS with forecasts
plot(forecast(ts_humidity_arima212, h= 30))
# to add fitted model into the existing plot
lines(fitted(ts_humidity_arima212), col="red", lwd=2)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 0.95)
# to plot the TS with forecasts
plot(forecast(ts_humidity_arima212, h= 30))
# to add fitted model into the existing plot
lines(fitted(ts_humidity_arima212), col="red", lwd=2)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 1)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 0.9)
# to plot the TS with forecasts
plot(forecast(ts_humidity_arima212, h= 30))
# to add fitted model into the existing plot
lines(fitted(ts_humidity_arima212), col="red", lwd=2)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 0.9)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 1)
# to plot the TS with forecasts
plot(forecast(ts_humidity_arima212, h= 30))
# to add fitted model into the existing plot
lines(fitted(ts_humidity_arima212), col="red", lwd=2)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 1)
# to plot the TS with forecasts
plot(forecast(ts_humidity_arima212, h= 30))
# to add fitted model into the existing plot
lines(fitted(ts_humidity_arima212), col="red", lwd=2)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 1.3)
# Import data
data_meter <- read_excel('datasets/meter_reading.xlsx')
View(data)
View(data_meter)
plot(data_meter$usage)
ts_meter <- ts(data_meter$usage, frequency = 7)
plot(ts_meter)
plot(decompose(ts_meter))
Acf(ts_meter)
adf.test(ts_meter)
ndiffs(ts_humidity)
ndiffs(ts_meter)
adf.test(diff(ts_meter))
mk.test(ts_meter)
isSeasonal(ts_meter)
tsdisplay(ts_meter)
tsdisplay(diff(ts_meter))
arima_meter <- arima(ts_meter, order = c(2, 0, 2))
auto.arima(ts_meter, trace = T)
arima_meter212 <- arima(ts_meter, order = c(2, 1, 2))
checkresiduals(arima_meter212)
plot(forecast(arima_meter212, h= 30))
# to add fitted model into the existing plot
lines(fitted(arima_meter212), col="red", lwd=2)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 1.3)
shapiro.test(arima_meter212$residuals)
accuracy(arima_meter212)
forecast(arima_meter212, h= 30)
summary(data_meter$usage)
coeftest(arima_meter212)
# KPSS for trend stationarity
kpss.test(ts_meter)
View(data_meter)
# to plot the TS with forecasts
plot(forecast(ts_humidity_arima212, h= 90))
# to add fitted model into the existing plot
lines(fitted(ts_humidity_arima212), col="red", lwd=2)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 1.3)
forecast(ts_humidity_arima212, h= 90)
# to plot the TS with forecasts
plot(forecast(ts_humidity_arima212, h= 60))
# to add fitted model into the existing plot
lines(fitted(ts_humidity_arima212), col="red", lwd=2)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 1.3)
forecast(ts_humidity_arima212, h= 60)
# Plot forecast for next 30 days
plot(forecast(arima_meter212, h= 90))
# Adding fitted model into the existing plot
lines(fitted(arima_meter212), col="red", lwd=2)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 1.3)
forecast(arima_meter212, h= 90)
# Plot forecast for next 30 days
plot(forecast(arima_meter212, h= 7))
# Adding fitted model into the existing plot
lines(fitted(arima_meter212), col="red", lwd=2)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 1.3)
forecast(arima_meter212, h= 7)
# Plot forecast for next 30 days
plot(forecast(arima_meter212, h= 7))
# ======= Performance Evaluation =======
# Simple Exponential Smoothing
ses_mean_f = ts(ses_forecast$mean, frequency = 7)
rbind(accuracy(ses_model) , accuracy(ses_mean_f, testing_ts))
# Import libraries
library('readxl')
library('forecast')
library('tseries')
library('TTR')
library('uroot')
library('trend')
library('seastests')
library('lmtest')
# Data partitioning using 80-20% ratio
training_ts <- ts(ts_humidity[1:(length(ts_humidity)*0.8)], frequency = 7)
testing_ts <- ts(ts_humidity[-c(1:(length(ts_humidity)*0.8))], frequency = 7)
# check the length of train and test sets
length(ts_humidity)
length(training_ts)
length(testing_ts)
# ======= Performance Evaluation =======
# Simple Exponential Smoothing
ses_mean_f = ts(ses_forecast$mean, frequency = 7)
rbind(accuracy(ses_model) , accuracy(ses_mean_f, testing_ts))
# Holts' Method
holts_mean_f <- ts(holts_forecast$mean, frequency = 7)
rbind(accuracy(holts_model) , accuracy(holts_mean_f, testing_ts))
# Linear Trend model
lr_mean_f <- ts(lr_forecast$mean, frequency = 7)
rbind(accuracy(lr_model) , accuracy(lr_mean_f, testing_ts))
# Number of differencing
ndiffs(ts_humidity)
# Performance matrices for both models
accuracy(ts_humidity_arima212)
accuracy(ts_humidity_arima112)
# Seasonal component test
isSeasonal(ts_humidity)
# Data partitioning using 80-20% ratio
training_ts <- ts(ts_humidity[1:(length(ts_humidity)*0.8)], frequency = 7)
# Import data
data <- read_excel('datasets/madrid.xlsx')
# Import libraries
library('readxl')
library('forecast')
library('tseries')
library('TTR')
library('uroot')
library('trend')
library('seastests')
library('lmtest')
# Import data
data <- read_excel('datasets/madrid.xlsx')
# Import libraries
library('readxl')
library('forecast')
library('tseries')
library('TTR')
library('uroot')
library('trend')
library('seastests')
library('lmtest')
# Import data
data <- read_excel('datasets/madrid.xlsx')
plot(data$humidity)
plot(data$wind)
# Convert to TS
ts_humidity <- ts(data$wind, start = c(2,1), frequency = 7)
length(ts_humidity)
# TS plot
plot(ts_humidity, main = "Daily Average Humdity in Dubai from 2022-01-01 to 2023-02-24",
xlab = "Day", ylab = "Humidity (%)")
# MK Test for trend
mk.test(ts_humidity)
# Seasonal component test
isSeasonal(ts_humidity)
# Auto ARIMA
auto.arima(ts_humidity, trace = T)
# Plot ACF and PACF
tsdisplay(ts_humidity, main = "ACF and PACF Plots for original series")
# Plot ACF and PACF after 1st differencing
tsdisplay(diff(ts_humidity,1), main = "ACF and PACF Plots after first differencing")
# ADF test
adf.test(ts_humidity)
# Plot ACF and PACF
tsdisplay(ts_humidity, main = "ACF and PACF Plots for original series")
# Plot ACF and PACF after 1st differencing
tsdisplay(diff(ts_humidity,1), main = "ACF and PACF Plots after first differencing")
# Auto ARIMA
auto.arima(ts_humidity, trace = T)
plot(data$humidity)
# Convert to TS
ts_humidity <- ts(data$humidity, start = c(2,1), frequency = 7)
length(ts_humidity)
# TS plot
plot(ts_humidity, main = "Daily Average Humdity in Dubai from 2022-01-01 to 2023-02-24",
xlab = "Day", ylab = "Humidity (%)")
# MK Test for trend
mk.test(ts_humidity)
# Seasonal component test
isSeasonal(ts_humidity)
# ACF plot
Acf(ts_humidity, main="Autocorrelation Plot for Humidity")
# ADF test
adf.test(ts_humidity)
# Auto ARIMA
auto.arima(ts_humidity, trace = T)
read.csv("datasets/Samsung_Stock_2022.csv")
read.csv("datasets/Samsung_Stock_2022.csv")
# Import dataset
samsung <- read.csv("datasets/Samsung_Stock_2022.csv")
View(samsung)
plot(samsung$Adj.Close)
# Import libraries
library('forecast')
# Import dataset
samsung_data <- read.csv("datasets/Samsung_Stock_2022.csv")
View(samsung_data)
plot(samsung_data$Adj.Close)
# Convert TS
samsung <- ts(samsung_data$Adj.Close)
# Plot ACF and PACF
tsdisplay(samsung)
# Check no. of differencing
ndiffs(samsung)
# Plot ACF and PACF after 1st diff
tsdisplay(diff(samsung),1)
# Plot ACF and PACF after 1st diff
tsdisplay(diff(samsung,1))
library('tseries')
library('tseries')
# Check ADF (Unit root test)
adf.test(samsung)
# Check ADF (Unit root test)
adf.test(diff(samsung, 1))
# Auto ARIMA
auto.arima(samsung, trace = T)
# Building ARIMA models
arima_samsung_010 <- arima(samsung, order = c(0, 1, 0))
arima_samsung_110 <- arima(samsung, order = c(1, 1, 0))
library('lmtest')
# Check adequacy
checkresiduals(arima_samsung_010)
checkresiduals(arima_samsung_110)
# Check accuracy
accuracy(arima_samsung_010)
accuracy(arima_samsung_110)
# Check adequacy
checkresiduals(arima_samsung_010)
checkresiduals(arima_samsung_110)
dev.off()
# Check accuracy
accuracy(arima_samsung_010)
# Check adequacy
checkresiduals(arima_samsung_010)
checkresiduals(arima_samsung_110)
# Check accuracy
accuracy(arima_samsung_010)
accuracy(arima_samsung_110)
# Check KPSS trend stationary test
kpss.test(samsung)
library('lmtest')
# Check coefficient test to support the model
coeftest(arima_samsung_010)
coeftest(arima_samsung_110)
install.packages(rugarch)
install.packages('rugarch')
library('rugarch')
library('dynlm')
# Plot ACF and PACF
tsdisplay(arima_samsung_010$residuals)
# Libraries for ARCH model
# install.packages('rugarch')
library('rugarch')
library('dynlm')
# Convert TS
rTS <- ts(samsung_data$Adj.Close)
# Apply log transformation
log_rTS_samsung <- log(rTS)
#
samsung_rTS <- ts(diff(log_rTS_samsung, 1))
plot(samsung_rTS)
#
tsdisplay(samsung_rTS)
# Plot ACF and PACF for residual
tsdisplay(arima_samsung_010$residuals^2)
# Import library
library('readxl')
library('forecast')
library('tseries')
library('TTR')
library('uroot')
library('trend') # mk.test
library('seastests') # is.seasonal
library('lmtest') # coeftest
library('dplyr')
# Import libraries
library('readxl')
library('forecast')
library('tseries')
library('TTR')
library('uroot')
library('trend')
library('seastests')
library('lmtest')
# Import data
data <- read_excel('datasets/Dubai_TSF.xlsx')
# Convert to TS
ts_humidity <- ts(data$humidity, start = c(2,1), frequency = 7)
length(ts_humidity)
# TS plot
plot(ts_humidity, main = "Daily Average Humdity in Dubai from 2022-01-01 to 2023-02-24",
xlab = "Day", ylab = "Humidity (%)")
# Plot ACF and PACF
tsdisplay(ts_humidity, main = "ACF and PACF Plots for original series")
# Plot ACF and PACF after 1st differencing
tsdisplay(diff(ts_humidity,1), main = "ACF and PACF Plots after first differencing")
# Auto ARIMA
auto.arima(ts_humidity, trace = T)
# Building ARIMA models
ts_humidity_arima212 <- arima(ts_humidity, order = c(2,1,2))
ts_humidity_arima112 <- arima(ts_humidity, order = c(1,1,2))
# Generate summary to get the coefficient(s)
summary(ts_humidity_arima212)
summary(ts_humidity_arima112)
# For testing the significant of the coefficients
coeftest(ts_humidity_arima212)
coeftest(ts_humidity_arima112)
# Conduct Ljung Box test and Residual Analysis
checkresiduals(ts_humidity_arima212)
checkresiduals(ts_humidity_arima112)
# Performance matrices for both models
accuracy(ts_humidity_arima212)
accuracy(ts_humidity_arima112)
# Plot the TS with forecasts for the best model
plot(forecast(ts_humidity_arima112, h= 30))
# Add fitted model into existing plot
lines(fitted(ts_humidity_arima212), col="red", lwd=2)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 1.3)
# Plot the TS with forecasts for the best model
plot(forecast(ts_humidity_arima112, h= 30))
# Add fitted model into existing plot
lines(fitted(ts_humidity_arima212), col="red", lwd=2)
legend("bottomleft", legend = c("Actual","Fitted", "Forecast"), col=c("black","red","blue"), lty=1, cex = 1.3)
# Auto ARIMA
auto.arima(ts_humidity, trace = T)
# Import libraries
library('readxl')
library('forecast')
library('tseries')
library('TTR')
library('uroot')
library('trend')
library('seastests')
library('lmtest')
# Auto ARIMA
auto.arima(ts_humidity, trace = T)
forecast(ts_humidity_arima112, h= 30)
forecast(ses_model, h=length(testing_ts))
# Import libraries
library('readxl')
library('forecast')
library('tseries')
library('TTR')
library('uroot')
library('trend')
library('seastests')
library('lmtest')
# Import data
data <- read_excel('datasets/Dubai_TSF.xlsx')
# Convert to TS
ts_humidity <- ts(data$humidity, start = c(2,1), frequency = 7)
length(ts_humidity)
# TS plot
plot(ts_humidity, main = "Daily Average Humdity in Dubai from 2022-01-01 to 2023-02-24",
xlab = "Day", ylab = "Humidity (%)")
# Seasonal component test
isSeasonal(ts_humidity)
# Data partitioning using 80-20% ratio
training_ts <- ts(ts_humidity[1:(length(ts_humidity)*0.8)], frequency = 7)
testing_ts <- ts(ts_humidity[-c(1:(length(ts_humidity)*0.8))], frequency = 7)
# check the length of train and test sets
length(ts_humidity)
length(training_ts)
length(testing_ts)
# ======= (i) Simple exponential Smoothing =======
ses_model <- ses(training_ts, h=length(testing_ts))
ses_forecast <- forecast(ses_model, h=length(testing_ts))
forecast(ses_model, h=length(testing_ts))
data <- read_excel('datasets/rainfall_r0.xlsx')
library('readxl')
library('forecast')
library('tseries')
library('TTR')
library('uroot')
library('trend')
library('seastests')
library('lmtest')
data <- read_excel('datasets/rainfall_r0.xlsx')
data <- read.csv('datasets/rainfall_r0.csv')
plot(data$rainfall_amt)
ts_humidity <- ts(data$rainfall_amt, frequency = 7)
# TS plot
plot(ts_humidity, main = "Daily Average Humdity in Dubai from 2022-01-01 to 2023-02-24",
xlab = "Day", ylab = "Humidity (%)")
ts_humidity <- ts(data$rainfall_amt, start = c(2,1) frequency = 7)
ts_humidity <- ts(data$rainfall_amt, start = c(2,1), frequency = 7)
# TS plot
plot(ts_humidity, main = "Daily Average Humdity in Dubai from 2022-01-01 to 2023-02-24",
xlab = "Day", ylab = "Humidity (%)")
# TS plot
plot(ts_humidity, main = "Daily Average Humdity in Dubai from 2022-01-01 to 2023-02-24",
xlab = "Day", ylab = "Humidity (%)")
# Plot ACF and PACF
tsdisplay(ts_humidity, main = "ACF and PACF Plots for original series")
# Auto ARIMA
auto.arima(ts_humidity, trace = T)
